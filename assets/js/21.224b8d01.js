(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{501:function(s,n,e){"use strict";e.r(n);var a=e(4),r=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[e("strong",[s._v("使用过的序列化方式")])]),s._v(" "),e("ol",[e("li",[e("p",[s._v("在模型定义的时候给序列化的方法")])]),s._v(" "),e("li",[e("p",[s._v("继承 flask 里面的 JSONEncoder类以及default方法")])])]),s._v(" "),e("h3",{attrs:{id:"自定义序列化方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义序列化方法"}},[s._v("#")]),s._v(" 自定义序列化方法")]),s._v(" "),e("h4",{attrs:{id:"模型定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模型定义"}},[s._v("#")]),s._v(" 模型定义")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class User(BaseModel, UserMixin):\n    __tablename__ = 'user'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True, unique=True)\n    nickname = db.Column(db.String(100))\n    mobile = db.Column(db.String(20), nullable=False)\n    email = db.Column(db.String(100))\n    sex = db.Column(db.Integer)\n    password_hash = db.Column(db.String(128), nullable=False)\n    status = db.Column(db.Integer)\n    roles = db.relationship('Role', secondary='roles_users',\n                            backref=db.backref('users', lazy='dynamic'))\n\n    # 自定义模型序列化 user.test_schema()\n    def test_schema(self):\n        return {\n            'id': self.id,\n            'nickname': self.nickname,\n            'mobile': self.mobile,\n            \"creat_time\": str(self.create_time)\n        }\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("h4",{attrs:{id:"view使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#view使用"}},[s._v("#")]),s._v(" view使用")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class UserView(Resource):\n    def __init__(self):\n        self.reqparse = reqparse.RequestParser()\n\n    def get(self, id):\n        user = User.query.filter_by(id=id).first()\n        # 调用定义方法\n        data = user.test_schema()\n        return jsonify(data)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h3",{attrs:{id:"重写jsonencoder"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重写jsonencoder"}},[s._v("#")]),s._v(" 重写JSONEncoder")]),s._v(" "),e("p",[s._v("在调用json.dumps()方法时默认会使用JSONEncoder进行序列化，传入cls参数后可以使用自定义的序列化方法，源码解析")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('def dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True,\n        allow_nan=True, cls=None, indent=None, separators=None,\n        default=None, sort_keys=False, **kw):\n\t# cls参数的使用介绍\n\t"""\n    To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n    ``.default()`` method to serialize additional types), specify it with\n    the ``cls`` kwarg; otherwise ``JSONEncoder`` is used.\n\t\n\t如果要使用自定义的“JSONEncoder”子类\n\t（例如，重写 default() 方法来序列化其他类型的数据），\n\t请使用使用“cls”关键字参数；否则默认使用“JSONEncoder”。\n    """\n\t# 部分源码：传入了 cls ，就会按照重写的方法执行\n\tif cls is None:\n        cls = JSONEncoder\n    return cls(\n        skipkeys=skipkeys, ensure_ascii=ensure_ascii,\n        check_circular=check_circular, allow_nan=allow_nan, indent=indent,\n        separators=separators, default=default, sort_keys=sort_keys,\n        **kw).encode(obj)\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("原有JSONEncoder的default()方法是不能够对对象进行序列化，需要重写default()方法，然后在调用json.dumps()时通过cls参数传进去")]),s._v(" "),e("h4",{attrs:{id:"模型定义-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模型定义-2"}},[s._v("#")]),s._v(" 模型定义")]),s._v(" "),e("p",[s._v("需要在User类中定义keys和getitem方法，然后在default函数中使用dict()函数。")]),s._v(" "),e("p",[s._v("基本上每一个模型类都要进行序列化，所以每一个模型类里都要写 keys、__getitem__方法。把一些公共的方法提取到基类BaseModel里面去")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class BaseModel(db.Model):\n    __abstract__ = True\n    create_time = db.Column(db.DateTime, default=datetime.now)\n    update_time = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)\n\n    def __getitem__(self, item):\n        return getattr(self, item)\n\n    def keys(self):\n        return self.fields\n\n    # 支持隐藏字段\n    def hide(self, *keys):\n        for key in keys:\n            self.fields.remove(key)\n        return self\n\n    # 支持添加字段\n    def append(self, *keys):\n        for key in keys:\n            self.fields.append(key)\n        return self\n\t\nclass User(BaseModel, UserMixin):\n    __tablename__ = 'user'\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True, unique=True)\n    nickname = db.Column(db.String(100))\n    mobile = db.Column(db.String(20), nullable=False)\n    email = db.Column(db.String(100))\n    sex = db.Column(db.Integer)\n    password_hash = db.Column(db.String(128), nullable=False)\n    status = db.Column(db.Integer)\n    roles = db.relationship('Role', secondary='roles_users',\n                            backref=db.backref('users', lazy='dynamic'))\n\n    # SQLALChemy的实例化是不会调用__init__函数，要想调用需要\n    # from sqlalchemy import orm\n    # @orm.reconstructor这个装饰器\n    @orm.reconstructor\n    def __init__(self):\n        self.fields = ['id', 'nickname', 'mobile', 'create_time']\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br")])]),e("h4",{attrs:{id:"重写jsonencoder-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重写jsonencoder-2"}},[s._v("#")]),s._v(" 重写JSONEncoder")]),s._v(" "),e("p",[s._v("o 对象")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("from datetime import date\n\nfrom flask import Flask as _Flask, current_app\nfrom flask.json import JSONEncoder as _JSONEncoder\n\nfrom application.libs.error_code import ServerError\n\n\nclass JSONEncoder(_JSONEncoder):\n    def default(self, o):\n        # 判断，如果对象没有这两个方法的话就返回 ServerError表示服务器内部错误\n        if hasattr(o, 'keys') and hasattr(o, '__getitem__'):\n            return dict(o)\n        # 兼容其他的序列化\n        if isinstance(o, date):\n            return o.strftime('%Y-%m-%d %H:%S')\n        # 自定义\n        raise ServerError()\n\n# 用我们自定义的 JSONEncoder 替代 Flask 原有的 JSONEncoder\nclass Flask(_Flask):\n    json_encoder = JSONEncoder\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);